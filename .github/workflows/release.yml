name: 'Build and Release'

on:
  push:
    branches:
      - main


jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      
      - name: Get version from tauri.conf.json
        id: version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'src-tauri/tauri.conf.json'
          prop_path: 'version'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install frontend dependencies
        run: pnpm install
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          # Signing keys for updater functionality
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          projectPath: src-tauri
          tauriScript: pnpm tauri
          args: ${{ matrix.args }}
          tagName: v${{ steps.version.outputs.prop }}
          releaseName: 'Kindly Klan Klient v${{ steps.version.outputs.prop }}'
          releaseBody: 'Automated release from commit ${{ github.sha }}'
          releaseDraft: false
          prerelease: false

      - name: Generate updater artifacts
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          cd src-tauri
          pnpm tauri build --no-bundle
          mkdir -p ../dist/updates
          # Move updater artifacts to a common location
          find target/release/bundle -name "*.sig" -o -name "*.tar.gz" | head -10 | xargs -I {} cp {} ../dist/updates/

      - name: Upload updater artifacts
        uses: actions/upload-artifact@v4
        with:
          name: updater-artifacts-${{ matrix.platform }}
          path: dist/updates/
          retention-days: 30

  create-latest-json:
    needs: publish-tauri
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get version from tauri.conf.json
        id: version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'src-tauri/tauri.conf.json'
          prop_path: 'version'

      - name: Create latest.json
        run: |
          # List all files in artifacts to debug
          echo "Files in artifacts directory:"
          find artifacts -type f | sort

          # Create latest.json with correct URLs based on actual files generated by Tauri
          cat > latest.json << EOF
          {
            "version": "${{ steps.version.outputs.prop }}",
            "notes": "Automated release from commit ${{ github.sha }}",
            "pub_date": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')",
            "platforms": {
              "linux-x86_64": {
                "signature": "$(find artifacts -name "*.AppImage.tar.gz.sig" | head -1 | xargs cat 2>/dev/null || echo "")",
                "url": "https://github.com/Kindly-Klan/KindlyKlanKlient/releases/download/v${{ steps.version.outputs.prop }}/$(find artifacts -name "*linux*.AppImage.tar.gz" | head -1 | xargs basename 2>/dev/null || echo "")"
              },
              "windows-x86_64": {
                "signature": "$(find artifacts -name "*.msi.zip.sig" | head -1 | xargs cat 2>/dev/null || echo "")",
                "url": "https://github.com/Kindly-Klan/KindlyKlanKlient/releases/download/v${{ steps.version.outputs.prop }}/$(find artifacts -name "*windows*.msi.zip" | head -1 | xargs basename 2>/dev/null || find artifacts -name "*Kindly*Klan*Klient*${{ steps.version.outputs.prop }}*windows*.msi" | head -1 | xargs basename 2>/dev/null || echo "")"
              },
              "darwin-x86_64": {
                "signature": "$(find artifacts -name "*darwin-x86_64*.app.tar.gz.sig" | head -1 | xargs cat 2>/dev/null || echo "")",
                "url": "https://github.com/Kindly-Klan/KindlyKlanKlient/releases/download/v${{ steps.version.outputs.prop }}/$(find artifacts -name "*darwin-x86_64*.app.tar.gz" | head -1 | xargs basename 2>/dev/null || echo "")"
              },
              "darwin-aarch64": {
                "signature": "$(find artifacts -name "*darwin-aarch64*.app.tar.gz.sig" | head -1 | xargs cat 2>/dev/null || echo "")",
                "url": "https://github.com/Kindly-Klan/KindlyKlanKlient/releases/download/v${{ steps.version.outputs.prop }}/$(find artifacts -name "*darwin-aarch64*.app.tar.gz" | head -1 | xargs basename 2>/dev/null || echo "")"
              }
            }
          }
          EOF

          echo "Generated latest.json:"
          cat latest.json

      - name: Upload latest.json to release
        run: |
          gh release upload v${{ steps.version.outputs.prop }} latest.json --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
