name: 'Build and Release'

on:
  push:
    branches:
      - main


jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      
      - name: Get version from tauri.conf.json
        id: version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'src-tauri/tauri.conf.json'
          prop_path: 'version'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install frontend dependencies
        run: pnpm install
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          # Signing keys for updater functionality
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          projectPath: src-tauri
          tauriScript: pnpm tauri
          args: ${{ matrix.args }}
          tagName: v${{ steps.version.outputs.prop }}
          releaseName: 'Kindly Klan Klient v${{ steps.version.outputs.prop }}'
          releaseBody: 'Automated release from commit ${{ github.sha }}'
          releaseDraft: false
          prerelease: false

      - name: Generate updater artifacts
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          cd src-tauri
          pnpm tauri build --no-bundle
          mkdir -p ../dist/updates
          # Move updater artifacts to a common location
          find target/release/bundle -name "*.sig" -o -name "*.tar.gz" | head -10 | xargs -I {} cp {} ../dist/updates/

      - name: Upload updater artifacts
        uses: actions/upload-artifact@v4
        with:
          name: updater-artifacts-${{ matrix.platform }}
          path: dist/updates/
          retention-days: 30

  create-latest-json:
    needs: publish-tauri
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get release assets JSON
        id: assets
        run: |
          set -e
          TAG=v${{ steps.version.outputs.prop }}
          echo "Using tag: $TAG"
          if ! gh release view "$TAG" --json assets -q '.assets[] | {name: .name, url: .url}' > assets.json; then
            echo "Release $TAG not found, falling back to latest release..."
            LATEST_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
            echo "Latest tag: $LATEST_TAG"
            gh release view "$LATEST_TAG" --json assets -q '.assets[] | {name: .name, url: .url}' > assets.json
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version from tauri.conf.json
        id: version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'src-tauri/tauri.conf.json'
          prop_path: 'version'

      - name: Create latest.json from release assets
        run: |
          set -e
          VERSION=${{ steps.version.outputs.prop }}
          echo "Using version: $VERSION"
          # Extraer URLs de assets y firmas directamente del JSON de assets
          get_asset_url() { jq -r --arg name "$1" 'select(.name==$name) | .url' assets.json; }
          get_sig_content() { \
            local base="$1"; \
            local sig_name="${base}.sig"; \
            local url=$(jq -r --arg name "$sig_name" 'select(.name==$name) | .url' assets.json); \
            if [[ "$url" == "null" || -z "$url" ]]; then echo ""; return; fi; \
            gh api "$url" -H "Accept: application/octet-stream" | cat | tr -d '\n' | sed 's/\r//g'; \
          }

          # Posibles nombres (Tauri suele zippear instaladores)
          LINUX_NAME=$(jq -r '.name | select(test("AppImage\\.tar\\.gz$"))' assets.json | head -1)
          WINDOWS_NAME=$(jq -r '.name | select(test("msi\\.zip$|nsis\\.zip$"))' assets.json | head -1)
          DARWIN_X86_NAME=$(jq -r '.name | select(test("darwin-x86_64.*\\.app\\.tar\\.gz$"))' assets.json | head -1)
          DARWIN_ARM_NAME=$(jq -r '.name | select(test("darwin-aarch64.*\\.app\\.tar\\.gz$"))' assets.json | head -1)

          echo "Detected names:"; echo "$LINUX_NAME"; echo "$WINDOWS_NAME"; echo "$DARWIN_X86_NAME"; echo "$DARWIN_ARM_NAME";

          LINUX_URL=$(get_asset_url "$LINUX_NAME")
          WINDOWS_URL=$(get_asset_url "$WINDOWS_NAME")
          DARWIN_X86_URL=$(get_asset_url "$DARWIN_X86_NAME")
          DARWIN_ARM_URL=$(get_asset_url "$DARWIN_ARM_NAME")

          # Descargar firmas como texto (contenido del .sig)
          LINUX_SIG=$(get_sig_content "$LINUX_NAME")
          WINDOWS_SIG=$(get_sig_content "$WINDOWS_NAME")
          DARWIN_X86_SIG=$(get_sig_content "$DARWIN_X86_NAME")
          DARWIN_ARM_SIG=$(get_sig_content "$DARWIN_ARM_NAME")

          cat > latest.json <<EOF
          {
            "version": "$VERSION",
            "notes": "Automated release from commit ${{ github.sha }}",
            "pub_date": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')",
            "platforms": {
              "linux-x86_64": { "signature": "$LINUX_SIG", "url": "$LINUX_URL" },
              "windows-x86_64": { "signature": "$WINDOWS_SIG", "url": "$WINDOWS_URL" },
              "darwin-x86_64": { "signature": "$DARWIN_X86_SIG", "url": "$DARWIN_X86_URL" },
              "darwin-aarch64": { "signature": "$DARWIN_ARM_SIG", "url": "$DARWIN_ARM_URL" }
            }
          }
          EOF

          echo "Generated latest.json:"; cat latest.json
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload latest.json to release
        run: |
          gh release upload v${{ steps.version.outputs.prop }} latest.json --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
